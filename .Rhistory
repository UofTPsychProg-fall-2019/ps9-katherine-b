ipip.comp <- ipip.comp %>% case_when(
ipip.comp %% 0:18.5 = "underweight",
ipip.comp %% 18.5:25 = "healthy",
ipip.comp %% 25:30 = "overweight",
TRUE ~ as.character(ipip.comp)))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when(
ipip.comp %% 0:18.5 = "underweight",
ipip.comp %% 18.5:25 = "healthy",
ipip.comp %% 25:30 = "overweight",
TRUE ~ as.character(ipip.comp))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when(
ipip.comp %% 0:18.5 = "underweight",
ipip.comp %% 18.5:25 = "healthy",
ipip.comp %% 25:30 = "overweight")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30> ~ "obese")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30< ~ "obese")
library(dplyr)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30< ~ "obese")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30< ~ "obese")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30 ~ "obese")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30 ~ "obese")
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30 ~ "obese",
TRUE ~ as.character(ipip.comp))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI == 18.5> ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI == 30 ~ "obese",
TRUE ~ as.character)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI > 18.5 ~ "underweight",
ipip.comp$BMI == 18.5:25 ~ "healthy",
ipip.comp$BMI == 25:30 ~ "overweight",
ipip.comp$BMI < 30 ~ "obese",
TRUE ~ as.character)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>% ipip.comp$BMI = case_when(
ipip.comp$BMI > 18.5 ~ "underweight",
ipip.comp$BMI = 18.5:25 ~ "healthy",
ipip.comp$BMI = 25:30 ~ "overweight",
ipip.comp$BMI < 30 ~ "obese",
TRUE ~ as.character)
library(tidyverse)
library(dplyr)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>% gather("A_1", "A_2", "A_3", "A_4", "A_5", "A_6", "A_7", "A_8", "A_9",
"A_10", "C_1","C_2", "C_3","C_4","C_5","C_6","C_7", "C_8", "C_9",
"C_10","E_1", "E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_10",
"N_1", "N_2","N_3","N_4","N_5","N_6","N_7","N_8","N_9","N_10","O_1", "O_10",
key=trait_items, value=score)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>% separate(trait_items,into=c('trait','item'),sep="_")
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>% group_by(RID,age, gender, BMI, exer,trait) %>% summarize(avg_trait=mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- (levels=c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer, levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp, levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
i
#
str(ipip.comp)
ipi.comp$exer <- as.fact0r(ipip.comp$exer)
ipi.comp$exer <- as.factor(ipip.comp$exer)
ipip.comp$exer <- as.factor(ipip.comp$exer)
#
str(ipip.comp)
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer, levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- ordered(ipip.comp$exer, levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
ipip.comp$exer <- as.factor(ipip.comp$exer) %>% (levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
ipip.comp$exer <- as.factor(ipip.comp$exer) %>% factor(levels = c("veryRarelyNever","less1mo","less1wk","1or2wk","3or5wk","more5wk"))
levels(ipip.comp$exer)
ipip.comp$exer <- factor(ipip.comp$exer,levels(ipip.comp$exer)
ipip.comp$exer <- as.factor(ipip.comp$exer) %>%
ipip.comp$exer <- factor(ipip.comp$exer,levels(ipip.comp$exer)[c(1,2,3,4,5,6)])
levels(ipip.comp$exer)
ipip.comp$exer <- as.factor(ipip.comp$exer) %>%
ipip.comp$exer <- ipip.comp$exer %>%
arrange(num) %>%
mutate(exer = factor(exer, exer))
ipip.comp$exer <- as.factor(ipip.comp$exer) %>%
ipip.comp$exer <- ipip.comp$exer %>%
mutate(exer = factor(exer, exer))
levels(ipip.comp$exer)
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
exer.avg <- ipip.comp %>% group_by(trait,exer) %>% summarize(avg_exer=mean(avg_trait),sem_exer=sd(avg_trait)/(sqrt(5000)))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg_exer,colour=exer))+
geom_pointrange(aes(ymin=avg_exer-sem_exer,ymax=avg_exer+sem_exer),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
View(ipip.comp)
View(ipip.comp)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>% group_by(trait,gender) %>% summarize(avg_gender=mean(avg_trait),sem_gender=sd(avg_trait)/(sqrt(5000)))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg_gender,colour=gender))+
geom_pointrange(aes(ymin=avg_gender-sem_gender,ymax=avg_gender+sem_gender),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
ipip.comp <- ipip.comp$BMI_cat %>%
select(BMI) %>%
mutate(
type = case_when(
BMI < 18.5 ~ "underweight",
BMI > 18.5 | BMI < 26 ~ "healthy",
BMI > 26 | BMI < 31  ~ "overweight",
BMI < 30             ~ "overweight"
)
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
select(BMI) %>%
mutate(
type = case_when(
BMI < 18.5 ~ "underweight",
BMI > 18.5 | BMI < 26 ~ "healthy",
BMI > 26 | BMI < 31  ~ "overweight",
BMI < 30             ~ "overweight"
)
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
mutate(
type = case_when(
BMI < 18.5 ~ "underweight",
BMI > 18.5 | BMI < 26 ~ "healthy",
BMI > 26 | BMI < 31  ~ "overweight",
BMI < 30             ~ "overweight"
)
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
mutate(
type = case_when(
BMI < 18.5 ~ "underweight",
BMI >= 18.5:25 ~ "healthy",
BMI >+ 26:31  ~ "overweight",
BMI < 30      ~ "overweight"
)
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
type = case_when(
BMI < 18.5 ~ "underweight",
BMI >= 18.5:25 ~ "healthy",
BMI >+ 26:31  ~ "overweight",
BMI < 30      ~ "overweight"
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
type = case_when(
ipip.comp$BMI < 18.5 ~ "underweight",
ipip.comp$BMI >= 18.5:25 ~ "healthy",
ipip.comp$BMI >+ 26:31  ~ "overweight",
ipip.comp$BMI < 30      ~ "overweight"
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
type = case_when(
ipip.comp$BMI < 18.5 ~ "underweight",
ipip.comp$BMI >= 18.5:25 ~ "healthy",
ipip.comp$BMI >= 26:31  ~ "overweight",
ipip.comp$BMI < 30      ~ "overweight"
)
library(tidyverse)
library(dplyr)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>% gather("A_1", "A_2", "A_3", "A_4", "A_5", "A_6", "A_7", "A_8", "A_9",
"A_10", "C_1","C_2", "C_3","C_4","C_5","C_6","C_7", "C_8", "C_9",
"C_10","E_1", "E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_10",
"N_1", "N_2","N_3","N_4","N_5","N_6","N_7","N_8","N_9","N_10","O_1", "O_10",
key=trait_items, value=score)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>% separate(trait_items,into=c('trait','item'),sep="_")
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>% group_by(RID,age, gender, BMI, exer,trait) %>% summarize(avg_trait=mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels=c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
View(ipip.comp)
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
exer.avg <- ipip.comp %>% group_by(trait,exer) %>% summarize(avg_exer=mean(avg_trait),sem_exer=sd(avg_trait)/(sqrt(5000)))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg_exer,colour=exer))+
geom_pointrange(aes(ymin=avg_exer-sem_exer,ymax=avg_exer+sem_exer),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>% group_by(trait,gender) %>% summarize(avg_gender=mean(avg_trait),sem_gender=sd(avg_trait)/(sqrt(5000)))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg_gender,colour=gender))+
geom_pointrange(aes(ymin=avg_gender-sem_gender,ymax=avg_gender+sem_gender),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI = case_when(
BMI<18.5 ~'underweight',
BMI>=18.5 & BMI <=25 ~ 'healthy',
BMI>25 & BMI <= 30 ~ 'overweight',
BMI>30 ~'obese'))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI)cat = case_when(
BMI<18.5 ~'underweight',
BMI>=18.5 & BMI <=25 ~ 'healthy',
BMI>25 & BMI <= 30 ~ 'overweight',
BMI>30 ~'obese'))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI_cat = case_when(
BMI<18.5 ~'underweight',
BMI>=18.5 & BMI <=25 ~ 'healthy',
BMI>25 & BMI <= 30 ~ 'overweight',
BMI>30 ~'obese'))
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat, levels=c(
'underweight', 'healthy', 'overweight', 'obese'))
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>% group_by(BMI_cat) %>%  summarize(avg_BMI=mean(avg_trait),sem_BMI=sd(avg_trait)/(sqrt(5000)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg_trait,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg_trait-sem_BMI,ymax=avg_trait+sem_BMI),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
View(bmi.avg)
View(gender.avg)
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>% group_by(trait,BMI_cat) %>%  summarize(avg_BMI=mean(avg_trait),sem_BMI=sd(avg_trait)/(sqrt(5000)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg_trait,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg_trait-sem_BMI,ymax=avg_trait+sem_BMI),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
ggsave('figures/BMI.pdf',units='in',width=7,height=5)
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>% group_by(trait,BMI_cat) %>%  summarize(avg_BMI=mean(avg_trait),sem_BMI=sd(avg_trait)/(sqrt(5000)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg_BMI,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg_BMI-sem_BMI,ymax=avg_BMI+sem_BMI),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
ggsave('figures/BMI.pdf',units='in',width=7,height=5)
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(trait)%>%
summarise(corrcoef = cor(age, avg_trait))
View(age.avg)
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
ggsave('figures/age.pdf',units='in',width=4,height=5)
library(tidyverse)
library(dplyr)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>% gather("A_1", "A_2", "A_3", "A_4", "A_5", "A_6", "A_7", "A_8", "A_9",
"A_10", "C_1","C_2", "C_3","C_4","C_5","C_6","C_7", "C_8", "C_9",
"C_10","E_1", "E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_10",
"N_1", "N_2","N_3","N_4","N_5","N_6","N_7","N_8","N_9","N_10","O_1", "O_10",
key=trait_items, value=score)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>% separate(trait_items,into=c('trait','item'),sep="_")
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>% group_by(RID,age, gender, BMI, exer,trait) %>% summarize(avg_trait=mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels=c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
exer.avg <- ipip.comp %>% group_by(trait,exer) %>% summarize(avg_exer=mean(avg_trait),sem_exer=sd(avg_trait)/(sqrt(5000)))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg_exer,colour=exer))+
geom_pointrange(aes(ymin=avg_exer-sem_exer,ymax=avg_exer+sem_exer),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>% group_by(trait,gender) %>% summarize(avg_gender=mean(avg_trait),sem_gender=sd(avg_trait)/(sqrt(5000)))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg_gender,colour=gender))+
geom_pointrange(aes(ymin=avg_gender-sem_gender,ymax=avg_gender+sem_gender),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI_cat = case_when(
BMI<18.5 ~'underweight',
BMI>=18.5 & BMI <=25 ~ 'healthy',
BMI>25 & BMI <= 30 ~ 'overweight',
BMI>30 ~'obese'))
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat, levels=c(
'underweight', 'healthy', 'overweight', 'obese'))
View(ipip.comp)
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>% group_by(trait,BMI_cat) %>%  summarize(avg_BMI=mean(avg_trait),sem_BMI=sd(avg_trait)/(sqrt(5000)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg_BMI,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg_BMI-sem_BMI,ymax=avg_BMI+sem_BMI),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
ggsave('figures/BMI.pdf',units='in',width=7,height=5)
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(trait)%>%
summarise(corrcoef = cor(age, avg_trait))
View(age.avg)
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
ggsave('figures/age.pdf',units='in',width=4,height=5)
